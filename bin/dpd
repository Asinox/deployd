#!/usr/bin/env node

var program = require('commander')
  , shelljs = require('shelljs/global')
  , path = require('path')
  , fs = require('fs')
  , tty = require('tty')
  , remote = require('../lib/client/remote')
  , request = require('request')
  , packageInfo = require('../package')
  , latestversionFile = path.join(__dirname, '../.latestversion')
  , Deployment = require('../lib/client/deploy').Deployment
  , open = require('../lib/util/open')
  , Monitor = require('forever-monitor').Monitor;

/**
 * Get the version number from the package.json
 */

program
  .version(require('../package').version)
  .option('-m, --mongod [path]', 'path to mongod executable (defaults to `mongod`)')
  .option('-p, --port [port]', 'port to host server (defaults to 2403)')
  .option('-w, --wait', 'wait for input before exiting')
  .option('-d, --dashboard', 'start the dashboard immediately')
  .option('-o, --open', 'open in a browser')
  .option('-e, --environment [env]', 'defaults to development');

/**
 * Commands
 */

program
  .command('create [project-name]')
  .description('\tcreate a project in a new directory\n\teg. `dpd create my-app`')
  .action(function(name) {
    name = name || 'my-deployd-app';
    if (test('-d',  name)) {
      return console.info(name + " already exists in this directory");
    }

    mkdir('-p', name);
    cp('-Rf', path.join(__dirname, '/createtemplate/*'), name);
    mkdir('-p', name + '/.dpd');
    mkdir('-p', name + '/.dpd/pids');
    ('').to(name + '/.dpd/pids/mongod');
    rm(ls('-R', name).filter(function(p) {
      return path.basename(p) === 'PLACEHOLDER';
    }).map(function(p) { return name + '/' + p}));

    if (program.dashboard || program.open) {
      start(name + '/app.dpd');
    } else {
      console.info('to start your app:');
      console.info('\t$ cd', name);
      console.info('\t$ dpd');
    }
  });

program
  .command('keygen')
  .description('\tgenerate a key for remote access (./.dpd/keys.json)')
  .action(function() {
    var Keys = require('../lib/keys')
      , keys = new Keys();

    keys.create(function(err, key) {
      if(err) return console.error(err);
      console.log('created key', key.substr(0, 16) + '...');
    });
  });

program
  .command('showkey')
  .description('\tshows current key for connecting to remote dashboard (./.dpd/keys.json)')
  .action(function() {
    var Keys = require('../lib/keys')
      , keys = new Keys();

    keys.getLocal(function(err, key) {
      if(err) return console.error(err);
      console.log("Copy this key for use in remote dashboard");
      console.log();
      console.log(key);
      console.log();
    });
  });  

program
  .command('remote')
  .description('\topen the remote dashboard in your browser')
  .action(function() {
    var d = new Deployment('.');
    var host = '';

    var config = d.getConfig();
    console.log(config);
    host = Object.keys(config)[0];

    if (host) {
      open('http://' + host + '/dashboard/');
    } else {
      console.log("This app has not yet been deployed");
    }    
  });

program
  .command('deploy [subdomain]')
  .description('\tdeploy a testing instance on deploydapp.com')
  .action(function (subdomain) {
    try {
      var d = new Deployment('.', null, subdomain)
        , tar = './.dpd/package.tgz'
        , DPDAPP_URL = 'http://deploydapp.com'
        , Keys = require('../lib/keys')
        , keys = new Keys();

      if (process.env.DPDAPP_PORT) DPDAPP_URL += ':' + process.env.DPDAPP_PORT;

      keys.getLocal(function (err, key) {
        if(err) return console.error(err);
        if(key) {
          deploy(key);
        } else {
          keys.create(function(err, key) {
            if(err) return console.error(err);
            deploy(key);
          });
        }
      });

      function deploy(key) {
        console.log('packaging...');
        d.package(tar, function (err) {
          if(err) return console.error(err);
          console.log('pushing...');
          d.publish(DPDAPP_URL, tar, key, function (err) {
            if(err) return console.error('failed to push:', err.message || 'could not push app to ' + DPDAPP_URL);
            console.log('deployd app to http://' + d.subdomain + '.deploydapp.com!');
          });
        });
      }
    } catch (ex) {
      console.log(ex.message);
    }
  });

program
  .command('*')
  .description('\t[default] start the server in the current project in development mode\n' +
               '\twith an interactive shell/repl for interacting with the running server\n' +
               '\te.g. dpd (starts server in current directory),\n' +
               '\t     dpd my-app/app.dpd (starts app from file)')
  .action(start);

function start(file) {
  var p = {};
  var options = ['mongod', 'port', 'wait', 'open', 'dashboard', 'environment'];
  
  options.forEach(function (key) {
    p[key] = program[key];
  });
  
  var monitor = new Monitor(__dirname + '/start.js', {silent: true, fork: true, spinSleepTime: 10000, max: 64});
  monitor.on('start', function () {
    monitor.child.send({command: 'start', program: p, file: file});
  });
  
  monitor.on('restart', function () {
    process.stdin.pipe(monitor.child.stdin);
    monitor.child.stdout.pipe(process.stdout);
    monitor.child.stderr.pipe(process.stderr);
    monitor.child.send({command: 'restart', program: p, file: file});
  });
  monitor.on('exit', function () {
    process.exit();
  });
  
  monitor.start();
  process.stdin.pipe(monitor.child.stdin);
  monitor.child.stdout.pipe(process.stdout);
  monitor.child.stderr.pipe(process.stderr);
  
  monitor.child.on('message', function (msg) {
    if(msg.command === 'exit') {
      process.exit();
    }
  });
}

/**
 * Parse the arguments
 */

program.parse(process.argv);

if(program.args.length === 0) start();
